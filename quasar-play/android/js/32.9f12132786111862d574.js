webpackJsonp([32],{106:function(s,t,i){function o(s){i(368)}var l=i(2)(null,i(443),o,null,null);s.exports=l.exports},350:function(s,t,i){t=s.exports=i(95)(void 0),t.push([s.i,".grid-rows .container{padding:15px;max-height:1000px}.grid-rows .row>div{padding:10px 15px;background:rgba(86,61,124,.15);border:1px solid rgba(86,61,124,.2)}.grid-rows .row+.row{margin-top:1rem}.grid-rows .example-minheight .row{min-height:5rem;background:rgba(255,0,0,.1)}.grid-columns .container{padding:15px}.grid-columns .column{height:300px}.grid-columns .column>div{padding:10px 15px;background:rgba(86,61,124,.15);border:1px solid rgba(86,61,124,.2)}.grid-columns .column+.column{margin-top:1rem}.grid-columns .example-minheight .column{min-width:5rem;background:rgba(255,0,0,.1)}",""])},368:function(s,t,i){var o=i(350);"string"==typeof o&&(o=[[s.i,o,""]]),o.locals&&(s.exports=o.locals);i(96)("259cbf84",o,!0)},443:function(s,t){s.exports={render:function(){var s=this,t=s.$createElement;s._self._c;return s._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,i=s._self._c||t;return i("div",{staticClass:"layout-padding"},[i("div",{staticClass:"grid-rows"},[i("h1",[s._v("Grid: Rows")]),s._v("\n    Utilize breakpoint-specific column classes for equal-width columns. Add any number of unit-less classes for each breakpoint you need and every column will be the same width.\n\n    "),i("h3",[s._v("Equal-width")]),s._v("\n    For example, here are two grid layouts that apply to every device and viewport, from xs to xl.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col"},[s._v("\n          1 of 2\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          1 of 2\n        ")])]),s._v(" "),i("div",{staticClass:"row"},[i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")])])]),s._v(" "),i("h3",[s._v("Setting one column width")]),s._v("\n    Auto-layout for flexbox grid columns also means you can set the width of one column and the others will automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline widths. Note that the other columns will resize no matter the width of the center column.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col-6"},[s._v("\n          2 of 3 (wider)\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          3 of 3\n        ")])]),s._v(" "),i("div",{staticClass:"row"},[i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col-5"},[s._v("\n          2 of 3 (wider)\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          3 of 3\n        ")])])]),s._v(" "),i("h3",[s._v("Variable width content")]),s._v("\n    Using the col-{breakpoint}-auto classes, columns can size itself based on the natural width of its content. This is super handy with single line content like inputs, numbers, etc. This, in conjunction with horizontal alignment classes, is very useful for centering layouts with uneven column sizes as viewport width changes.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"row justify-md-center"},[i("div",{staticClass:"col col-lg-2"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col-12 col-md-auto"},[s._v("\n          Variable width content\n        ")]),s._v(" "),i("div",{staticClass:"col col-lg-2"},[s._v("\n          3 of 3\n        ")])]),s._v(" "),i("div",{staticClass:"row"},[i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col-12 col-md-auto"},[s._v("\n          Variable width content\n        ")]),s._v(" "),i("div",{staticClass:"col col-lg-2"},[s._v("\n          3 of 3\n        ")])])]),s._v(" "),i("h1",[s._v("Responsive classes")]),s._v("\n    The grid includes five tiers of predefined classes for building complex responsive layouts. Customize the size of your columns on extra small, small, medium, large, or extra large devices however you see fit.\n\n    "),i("h3",[s._v("All breakpoints")]),s._v("\n    For grids that are the same from the smallest of devices to the largest, use the .col and .col-* classes. Specify a numbered class when you need a particularly sized column; otherwise, feel free to stick to .col.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col"},[s._v("col")]),s._v(" "),i("div",{staticClass:"col"},[s._v("col")]),s._v(" "),i("div",{staticClass:"col"},[s._v("col")]),s._v(" "),i("div",{staticClass:"col"},[s._v("col")])]),s._v(" "),i("div",{staticClass:"row"},[i("div",{staticClass:"col-8"},[s._v("col-8")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("col-4")])])]),s._v(" "),i("h3",[s._v("Stacked to horizontal")]),s._v("\n    Using a single set of .col-sm-* classes, you can create a basic grid system that starts out stacked on extra small devices before becoming horizontal on desktop (medium) devices.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col-sm-8"},[s._v("col-sm-8")]),s._v(" "),i("div",{staticClass:"col-sm-4"},[s._v("col-sm-4")])]),s._v(" "),i("div",{staticClass:"row"},[i("div",{staticClass:"col-sm"},[s._v("col-sm")]),s._v(" "),i("div",{staticClass:"col-sm"},[s._v("col-sm")]),s._v(" "),i("div",{staticClass:"col-sm"},[s._v("col-sm")])])]),s._v(" "),i("h3",[s._v("Mix and match")]),s._v("\n    Donâ€™t want your columns to simply stack in some grid tiers? Use a combination of different classes for each tier as needed. See the example below for a better idea of how it all works.\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col col-md-8"},[s._v(".col .col-md-8")]),s._v(" "),i("div",{staticClass:"col-6 col-md-4"},[s._v(".col-6 .col-md-4")])]),s._v(" "),i("div",{staticClass:"row"},[i("div",{staticClass:"col-6 col-md-4"},[s._v(".col-6 .col-md-4")]),s._v(" "),i("div",{staticClass:"col-6 col-md-4"},[s._v(".col-6 .col-md-4")]),s._v(" "),i("div",{staticClass:"col-6 col-md-4"},[s._v(".col-6 .col-md-4")])]),s._v(" "),i("div",{staticClass:"row"},[i("div",{staticClass:"col-6"},[s._v(".col-6")]),s._v(" "),i("div",{staticClass:"col-6"},[s._v(".col-6")])])]),s._v(" "),i("h1",[s._v("Alignment")]),s._v("\n    Use flexbox alignment utilities to vertically and horizontally align columns.\n\n    "),i("h3",[s._v("Vertical alignment")]),s._v(" "),i("div",{staticClass:"container example-minheight"},[i("div",{staticClass:"row items-start"},[i("div",{staticClass:"col"},[s._v("\n          One of three columns\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three columns\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three columns\n        ")])]),s._v(" "),i("div",{staticClass:"row items-center"},[i("div",{staticClass:"col"},[s._v("\n          One of three columns\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three columns\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three columns\n        ")])]),s._v(" "),i("div",{staticClass:"row items-end"},[i("div",{staticClass:"col"},[s._v("\n          One of three columns\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three columns\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three columns\n        ")])])]),s._v(" "),i("div",{staticClass:"container example-minheight"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col self-start"},[s._v("\n          One of three columns\n        ")]),s._v(" "),i("div",{staticClass:"col self-center"},[s._v("\n          One of three columns\n        ")]),s._v(" "),i("div",{staticClass:"col self-end"},[s._v("\n          One of three columns\n        ")])])]),s._v(" "),i("h3",[s._v("Horizontal alignment")]),s._v(" "),i("div",{staticClass:"container"},[i("div",{staticClass:"row justify-start"},[i("div",{staticClass:"col-4"},[s._v("\n          One of two columns\n        ")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("\n          One of two columns\n        ")])]),s._v(" "),i("div",{staticClass:"row justify-center"},[i("div",{staticClass:"col-4"},[s._v("\n          One of two columns\n        ")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("\n          One of two columns\n        ")])]),s._v(" "),i("div",{staticClass:"row justify-end"},[i("div",{staticClass:"col-4"},[s._v("\n          One of two columns\n        ")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("\n          One of two columns\n        ")])]),s._v(" "),i("div",{staticClass:"row justify-around"},[i("div",{staticClass:"col-4"},[s._v("\n          One of two columns\n        ")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("\n          One of two columns\n        ")])]),s._v(" "),i("div",{staticClass:"row justify-between"},[i("div",{staticClass:"col-4"},[s._v("\n          One of two columns\n        ")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("\n          One of two columns\n        ")])])]),s._v(" "),i("h3",[s._v("Column wrapping")]),s._v("\n    If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col-9"},[s._v(".col-9")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v(".col-4"),i("br"),s._v("Since 9 + 4 = 13 > 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.")]),s._v(" "),i("div",{staticClass:"col-6"},[s._v(".col-6"),i("br"),s._v("Subsequent columns continue along the new line.")])])]),s._v(" "),i("div",{staticClass:"container"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col-6 col-sm-3"},[s._v(".col-6 .col-sm-3")]),s._v(" "),i("div",{staticClass:"col-6 col-sm-3"},[s._v(".col-6 .col-sm-3")]),s._v(" "),i("div",{staticClass:"col-6 col-sm-3"},[s._v(".col-6 .col-sm-3")]),s._v(" "),i("div",{staticClass:"col-6 col-sm-3"},[s._v(".col-6 .col-sm-3")])])]),s._v(" "),i("h1",[s._v("Reordering")]),s._v(" "),i("h3",[s._v("Reverse")]),s._v(" "),i("div",{staticClass:"container"},[i("div",{staticClass:"row reverse"},[i("div",{staticClass:"col"},[s._v("\n          First, but last\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          Second, unchanged\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          Third, but first\n        ")])])]),s._v(" "),i("h3",[s._v("Flex order")]),s._v("\n    Use flexbox utilities for controlling the visual order of your content.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col order-none"},[s._v("\n          First, but unordered\n        ")]),s._v(" "),i("div",{staticClass:"col order-last"},[s._v("\n          Second, but last\n        ")]),s._v(" "),i("div",{staticClass:"col order-first"},[s._v("\n          Third, but first\n        ")])])]),s._v(" "),i("h3",[s._v("Offsetting columns")]),s._v("\n    Move columns to the right using .offset-md-* classes. These classes increase the left margin of a column by * columns. For example, .offset-md-4 moves .col-md-4 over four columns.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col-md-4"},[s._v(".col-md-4")]),s._v(" "),i("div",{staticClass:"col-md-4 offset-md-4"},[s._v(".col-md-4 .offset-md-4")])]),s._v(" "),i("div",{staticClass:"row"},[i("div",{staticClass:"col-md-3 offset-md-3"},[s._v(".col-md-3 .offset-md-3")]),s._v(" "),i("div",{staticClass:"col-md-3 offset-md-3"},[s._v(".col-md-3 .offset-md-3")])]),s._v(" "),i("div",{staticClass:"row"},[i("div",{staticClass:"col-md-6 offset-md-3"},[s._v(".col-md-6 .offset-md-3")])])]),s._v(" "),i("h1",[s._v("Nesting")]),s._v("\n    To nest your content with the default grid, add a new .row and set of .col-sm-* columns within an existing .col-sm-* column. Nested rows should include a set of columns that add up to 12 or fewer (it is not required that you use all 12 available columns).\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col-sm-9"},[s._v("\n          Level 1: .col-sm-9\n          "),i("div",{staticClass:"row"},[i("div",{staticClass:"col-8 col-sm-6"},[s._v("\n              Level 2: .col-8 .col-sm-6\n            ")]),s._v(" "),i("div",{staticClass:"col-4 col-sm-6"},[s._v("\n              Level 2: .col-4 .col-sm-6\n            ")])])])])]),s._v(" "),i("div",{staticClass:"container"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col-7"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col-9"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col-4"}),s._v(" "),i("div",{staticClass:"col-8"})])]),s._v(" "),i("div",{staticClass:"col-3"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col"})])])])]),s._v(" "),i("div",{staticClass:"col-5"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col-12"},[i("div",{staticClass:"row"},[i("div",{staticClass:"col-6"}),s._v(" "),i("div",{staticClass:"col-4"})])])])])])])]),s._v(" "),i("div",{staticClass:"grid-columns"},[i("h1",[s._v("Grid: Columns")]),s._v("\n    Utilize breakpoint-specific row classes for equal-width rows. Add any number of unit-less classes for each breakpoint you need and every row will be the same height.\n\n    "),i("h3",[s._v("Equal-width")]),s._v("\n    For example, here are two grid layouts that apply to every device and viewport, from xs to xl.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"column"},[i("div",{staticClass:"col"},[s._v("\n          1 of 2\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          1 of 2\n        ")])]),s._v(" "),i("div",{staticClass:"column"},[i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")])])]),s._v(" "),i("h3",[s._v("Setting one row height")]),s._v("\n    Auto-layout for flexbox grid rows also means you can set the height of one row and the others will automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline heights. Note that the other rows will resize no matter the height of the center row.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"column"},[i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col-6"},[s._v("\n          2 of 3 (wider)\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          3 of 3\n        ")])]),s._v(" "),i("div",{staticClass:"column"},[i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col-5"},[s._v("\n          2 of 3 (wider)\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          3 of 3\n        ")])])]),s._v(" "),i("h3",[s._v("Variable height content")]),s._v("\n    Using the col-{breakpoint}-auto classes, rows can size itself based on the natural height of its content. This is super handy with single line content like inputs, numbers, etc. This, in conjunction with horizontal alignment classes, is very useful for centering layouts with uneven row sizes as viewport height changes.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"column justify-md-center"},[i("div",{staticClass:"col col-lg-2"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col-12 col-md-auto"},[s._v("\n          Variable width content\n        ")]),s._v(" "),i("div",{staticClass:"col col-lg-2"},[s._v("\n          3 of 3\n        ")])]),s._v(" "),i("div",{staticClass:"column"},[i("div",{staticClass:"col"},[s._v("\n          1 of 3\n        ")]),s._v(" "),i("div",{staticClass:"col-12 col-md-auto"},[s._v("\n          Variable width content\n        ")]),s._v(" "),i("div",{staticClass:"col col-lg-2"},[s._v("\n          3 of 3\n        ")])])]),s._v(" "),i("h1",[s._v("Responsive classes")]),s._v("\n    The grid includes five tiers of predefined classes for building complex responsive layouts. Customize the size of your rows on extra small, small, medium, large, or extra large devices however you see fit.\n\n    "),i("h3",[s._v("All breakpoints")]),s._v("\n    For grids that are the same from the smallest of devices to the largest, use the .col and .col-* classes. Specify a numbered class when you need a particularly sized row; otherwise, feel free to stick to .col.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"column"},[i("div",{staticClass:"col"},[s._v("col")]),s._v(" "),i("div",{staticClass:"col"},[s._v("col")]),s._v(" "),i("div",{staticClass:"col"},[s._v("col")]),s._v(" "),i("div",{staticClass:"col"},[s._v("col")])]),s._v(" "),i("div",{staticClass:"column"},[i("div",{staticClass:"col-8"},[s._v("col-8")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("col-4")])])]),s._v(" "),i("h3",[s._v("Mix and match")]),s._v("\n    Donâ€™t want your rows to simply stack in some grid tiers? Use a combination of different classes for each tier as needed. See the example below for a better idea of how it all works.\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"column"},[i("div",{staticClass:"col col-md-8"},[s._v(".col .col-md-8")]),s._v(" "),i("div",{staticClass:"col-6 col-md-4"},[s._v(".col-6 .col-md-4")])]),s._v(" "),i("div",{staticClass:"column"},[i("div",{staticClass:"col-6 col-md-4"},[s._v(".col-6 .col-md-4")]),s._v(" "),i("div",{staticClass:"col-6 col-md-4"},[s._v(".col-6 .col-md-4")]),s._v(" "),i("div",{staticClass:"col-6 col-md-4"},[s._v(".col-6 .col-md-4")])]),s._v(" "),i("div",{staticClass:"column"},[i("div",{staticClass:"col-6"},[s._v(".col-6")]),s._v(" "),i("div",{staticClass:"col-6"},[s._v(".col-6")])])]),s._v(" "),i("h1",[s._v("Alignment")]),s._v("\n    Use flexbox alignment utilities to vertically and horizontally align columns.\n\n    "),i("h3",[s._v("Horizontal alignment")]),s._v(" "),i("div",{staticClass:"container example-minheight"},[i("div",{staticClass:"column items-start"},[i("div",{staticClass:"col"},[s._v("\n          One of three rows\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three rows\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three rows\n        ")])]),s._v(" "),i("div",{staticClass:"column items-center"},[i("div",{staticClass:"col"},[s._v("\n          One of three rows\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three rows\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three rows\n        ")])]),s._v(" "),i("div",{staticClass:"column items-end"},[i("div",{staticClass:"col"},[s._v("\n          One of three rows\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three rows\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          One of three rows\n        ")])])]),s._v(" "),i("div",{staticClass:"container example-minheight"},[i("div",{staticClass:"column"},[i("div",{staticClass:"col self-start"},[s._v("\n          One of three rows\n        ")]),s._v(" "),i("div",{staticClass:"col self-center"},[s._v("\n          One of three rows\n        ")]),s._v(" "),i("div",{staticClass:"col self-end"},[s._v("\n          One of three rows\n        ")])])]),s._v(" "),i("h3",[s._v("Vertical alignment")]),s._v(" "),i("div",{staticClass:"container"},[i("div",{staticClass:"column justify-start"},[i("div",{staticClass:"col-4"},[s._v("\n          One of two rows\n        ")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("\n          One of two rows\n        ")])]),s._v(" "),i("div",{staticClass:"column justify-center"},[i("div",{staticClass:"col-4"},[s._v("\n          One of two rows\n        ")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("\n          One of two rows\n        ")])]),s._v(" "),i("div",{staticClass:"column justify-end"},[i("div",{staticClass:"col-4"},[s._v("\n          One of two rows\n        ")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("\n          One of two columns\n        ")])]),s._v(" "),i("div",{staticClass:"column justify-around"},[i("div",{staticClass:"col-4"},[s._v("\n          One of two rows\n        ")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("\n          One of two rows\n        ")])]),s._v(" "),i("div",{staticClass:"column justify-between"},[i("div",{staticClass:"col-4"},[s._v("\n          One of two rows\n        ")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v("\n          One of two rows\n        ")])])]),s._v(" "),i("h3",[s._v("Row wrapping")]),s._v("\n    If more than 12 rows are placed within a single row, each group of extra rows will, as one unit, wrap onto a new column.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"column"},[i("div",{staticClass:"col-9"},[s._v(".col-9")]),s._v(" "),i("div",{staticClass:"col-4"},[s._v(".col-4"),i("br"),s._v("Since 9 + 4 = 13 > 12,"),i("br"),s._v("this 4-row-wide div gets wrapped"),i("br"),s._v("onto a new line as"),i("br"),s._v("one contiguous unit.")]),s._v(" "),i("div",{staticClass:"col-6"},[s._v(".col-6"),i("br"),s._v("Subsequent rows continue along the new line.")])])]),s._v(" "),i("div",{staticClass:"container"},[i("div",{staticClass:"column"},[i("div",{staticClass:"col-6 col-sm-3"},[s._v(".col-6 .col-sm-3")]),s._v(" "),i("div",{staticClass:"col-6 col-sm-3"},[s._v(".col-6 .col-sm-3")]),s._v(" "),i("div",{staticClass:"col-6 col-sm-3"},[s._v(".col-6 .col-sm-3")]),s._v(" "),i("div",{staticClass:"col-6 col-sm-3"},[s._v(".col-6 .col-sm-3")])])]),s._v(" "),i("h1",[s._v("Reordering")]),s._v(" "),i("h3",[s._v("Reverse")]),s._v(" "),i("div",{staticClass:"container"},[i("div",{staticClass:"column reverse"},[i("div",{staticClass:"col"},[s._v("\n          First, but last\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          Second, unchanged\n        ")]),s._v(" "),i("div",{staticClass:"col"},[s._v("\n          Third, but first\n        ")])])]),s._v(" "),i("h3",[s._v("Flex order")]),s._v("\n    Use flexbox utilities for controlling the visual order of your content.\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"column"},[i("div",{staticClass:"col order-none"},[s._v("\n          First, but unordered\n        ")]),s._v(" "),i("div",{staticClass:"col order-last"},[s._v("\n          Second, but last\n        ")]),s._v(" "),i("div",{staticClass:"col order-first"},[s._v("\n          Third, but first\n        ")])])]),s._v(" "),i("h1",[s._v("Nesting")]),s._v("\n    To nest your content with the default grid, add a new .column and set of .col-sm-* rows within an existing .col-sm-* row. Nested columns should include a set of rows that add up to 12 or fewer (it is not required that you use all 12 available columns).\n\n    "),i("div",{staticClass:"container"},[i("div",{staticClass:"column"},[i("div",{staticClass:"col-sm-9"},[s._v("\n          Level 1: .col-sm-9\n          "),i("div",{staticClass:"column",staticStyle:{height:"150px"}},[i("div",{staticClass:"col-8 col-sm-6"},[s._v("\n              Level 2: .col-8 .col-sm-6\n            ")]),s._v(" "),i("div",{staticClass:"col-4 col-sm-6"},[s._v("\n              Level 2: .col-4 .col-sm-6\n            ")])])])])])])])}]}}});